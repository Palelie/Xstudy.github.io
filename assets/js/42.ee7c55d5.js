(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{1692:function(t,s,r){"use strict";r.r(s);var a=r(1),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"最短路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最短路径"}},[t._v("#")]),t._v(" 最短路径")]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"此章节建议看视频动画演示-此处只展示部分流程和代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#此章节建议看视频动画演示-此处只展示部分流程和代码"}},[t._v("#")]),t._v(" 此章节建议看视频动画演示，此处只展示部分流程和代码")])]),t._v(" "),a("p",[a("img",{attrs:{src:r(628),alt:"1639816005(1)"}})]),t._v(" "),a("h2",{attrs:{id:"一、应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、应用"}},[t._v("#")]),t._v(" 一、应用")]),t._v(" "),a("p",[a("img",{attrs:{src:r(629),alt:"1639816221(1)"}})]),t._v(" "),a("p",[a("img",{attrs:{src:r(630),alt:"1639816259(1)"}})]),t._v(" "),a("p",[a("img",{attrs:{src:r(631),alt:"1639816407(1)"}})]),t._v(" "),a("h2",{attrs:{id:"二、dijistra算法-视频链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、dijistra算法-视频链接"}},[t._v("#")]),t._v(" 二、Dijistra算法"),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1nJ411V7bd?p=132",target:"_blank",rel:"noopener noreferrer"}},[t._v("（视频链接）"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:r(369),alt:"1639816437(1)"}})]),t._v(" "),a("p",[a("img",{attrs:{src:r(632),alt:"1639816596(1)"}})]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"步骤与最小生成树的prim算法类似-每次都把一个路径最短的结点加入集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#步骤与最小生成树的prim算法类似-每次都把一个路径最短的结点加入集合"}},[t._v("#")]),t._v(" 步骤与最小生成树的Prim算法类似——每次都把一个路径最短的结点加入集合")])]),t._v(" "),a("p",[a("img",{attrs:{src:r(633),alt:"1639816713(1)"}})]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"关键-与最小生成树算法prim的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键-与最小生成树算法prim的区别"}},[t._v("#")]),t._v(" 关键——与最小生成树算法prim的区别：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Prim算法：每次加入新结点后，更新的是"),a("strong",[t._v("整个已归纳的顶点")]),t._v("集合与所有未归纳的顶点之间的最短距离")])]),t._v(" "),a("li",[a("p",[t._v("Dijkstra算法：每次加入新的结点后，更新的是"),a("strong",[t._v("初始结点")]),t._v("与所有未归纳的顶点之间的最短路径（需重新计算起点到其他尚未纳入集合的点的距离，是否会因为加入新的这个点后变的更近（或者原本没路，加了新的点后有路了））。然后再和prim算法一样，继续从集合中选出与剩余各点相距最短的边，将新的结点纳入集合")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:r(634),alt:"1639818342(1)"}})]),t._v(" "),a("h2",{attrs:{id:"三、floyd-弗洛伊德-算法-视频链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、floyd-弗洛伊德-算法-视频链接"}},[t._v("#")]),t._v(" 三、Floyd（弗洛伊德）算法"),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1nJ411V7bd?p=133",target:"_blank",rel:"noopener noreferrer"}},[t._v("（视频链接）"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:r(369),alt:"1639816437(1)"}})]),t._v(" "),a("p",[a("img",{attrs:{src:r(635),alt:"1639822364(1)"}})]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"时间复杂度都是o-n3-但该问题用floyd算法会比dijkstra算法简单很多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度都是o-n3-但该问题用floyd算法会比dijkstra算法简单很多"}},[t._v("#")]),t._v(" 时间复杂度都是O(n3)，但该问题用Floyd算法会比Dijkstra算法简单很多")])]),t._v(" "),a("p",[a("img",{attrs:{src:r(636),alt:"1639824621(1)"}})]),t._v(" "),a("p",[a("img",{attrs:{src:r(637),alt:"1639824878(1)"}})])])}),[],!1,null,null,null);s.default=e.exports},369:function(t,s,r){t.exports=r.p+"assets/img/1639816437(1).eb4e8ef7.jpg"},628:function(t,s,r){t.exports=r.p+"assets/img/1639816005(1).783661f9.jpg"},629:function(t,s,r){t.exports=r.p+"assets/img/1639816221(1).93a2802c.jpg"},630:function(t,s,r){t.exports=r.p+"assets/img/1639816259(1).0f7f00d7.jpg"},631:function(t,s,r){t.exports=r.p+"assets/img/1639816407(1).38d5d9fe.jpg"},632:function(t,s,r){t.exports=r.p+"assets/img/1639816596(1).3b81e5f2.jpg"},633:function(t,s,r){t.exports=r.p+"assets/img/1639816713(1).4ea05153.jpg"},634:function(t,s,r){t.exports=r.p+"assets/img/1639818342(1).68982483.jpg"},635:function(t,s,r){t.exports=r.p+"assets/img/1639822364(1).ba45c982.jpg"},636:function(t,s,r){t.exports=r.p+"assets/img/1639824621(1).25df9678.jpg"},637:function(t,s,r){t.exports=r.p+"assets/img/1639824878(1).dc78f229.jpg"}}]);