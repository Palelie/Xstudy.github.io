(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{1788:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"线程的调度-了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程的调度-了解"}},[t._v("#")]),t._v(" 线程的调度（了解）")]),t._v(" "),a("h2",{attrs:{id:"一、常见的线程调度模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、常见的线程调度模型"}},[t._v("#")]),t._v(" 一、常见的线程调度模型")]),t._v(" "),a("h3",{attrs:{id:"_1、抢占式调度模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、抢占式调度模型"}},[t._v("#")]),t._v(" 1、抢占式调度模型：")]),t._v(" "),a("p",[t._v("​\t\t哪个线程的优先级比较高，抢到的CPU时间片的概率就高一些/多一些。\n​\t\tjava采用的就是抢占式调度模型。")]),t._v(" "),a("h3",{attrs:{id:"_2、均分式调度模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、均分式调度模型"}},[t._v("#")]),t._v(" 2、均分式调度模型：")]),t._v(" "),a("p",[t._v("​\t\t平均分配CPU时间片。每个线程占有的CPU时间片时间长度一样。\n​\t\t平均分配，一切平等。\n​\t\t有一些编程语言，线程调度模型采用的是这种方式。")]),t._v(" "),a("h2",{attrs:{id:"二、和线程调度有关的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、和线程调度有关的方法"}},[t._v("#")]),t._v(" 二、和线程调度有关的方法")]),t._v(" "),a("h3",{attrs:{id:"_1、-实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、-实例方法"}},[t._v("#")]),t._v(" 1、 实例方法：")]),t._v(" "),a("p",[t._v("​\t\t"),a("code",[t._v("void setPriority(int newPriority)")]),t._v(" \t设置线程的优先级\n​\t\t"),a("code",[t._v("int getPriority()")]),t._v("\t\t 获取线程优先级")]),t._v(" "),a("p",[t._v("​\t\t"),a("code",[t._v("void join()")]),t._v("  \t\t合并线程")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSome")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread2")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前线程进入阻塞，t线程执行，直到t线程结束。当前线程才可以继续。")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("​")]),t._v(" "),a("p",[a("strong",[t._v("优先级：")])]),t._v(" "),a("p",[t._v("​\t\t最低优先级1\n​\t\t默认优先级是5\n​\t\t最高优先级10\n​\t\t优先级比较高的获取CPU时间片可能会多一些。（但也不完全是，大概率是多的。）\n​")]),t._v(" "),a("h3",{attrs:{id:"_2、静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、静态方法"}},[t._v("#")]),t._v(" 2、静态方法：")]),t._v(" "),a("p",[t._v("​\t\t"),a("code",[t._v("static void yield()")]),t._v("  让位方法，暂停当前正在执行的线程对象，并执行其他线程\n​\t\t"),a("strong",[t._v("注意：")]),t._v(" yield()方法不是阻塞方法。让当前线程让位，让给其它线程使用。\n​\t\tyield()方法的执行会让当前线程"),a("strong",[t._v("从“运行状态”回到“就绪状态”")]),t._v("。\n​\t\t"),a("strong",[t._v("注意：")]),t._v(" 在回到就绪之后，有可能还会再次抢到。\n​\t\n​")])])}),[],!1,null,null,null);s.default=e.exports}}]);