(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{1794:function(t,a,s){"use strict";s.r(a);var r=s(1),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"逻辑运算注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算注意事项"}},[t._v("#")]),t._v(" 逻辑运算注意事项")]),t._v(" "),s("blockquote",[s("h3",{attrs:{id:"注意-java中的逻辑运算符要求两边都是布尔类型-并且最终的运算结果也是布尔类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意-java中的逻辑运算符要求两边都是布尔类型-并且最终的运算结果也是布尔类型"}},[t._v("#")]),t._v(" "),s("strong",[t._v("注意:java中的逻辑运算符要求两边都是布尔类型,并且最终的运算结果也是布尔类型")])]),t._v(" "),s("h3",{attrs:{id:"由于java中boolean类型只有true和false-不能用0和1或其他数字表示-因此在c和c-中if-int-i-、if-100-之类的写法不能在java中使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#由于java中boolean类型只有true和false-不能用0和1或其他数字表示-因此在c和c-中if-int-i-、if-100-之类的写法不能在java中使用"}},[t._v("#")]),t._v(" 由于java中boolean类型只有true和false,不能用0和1或其他数字表示,因此在c和c++中"),s("code",[t._v("if(int i)")]),t._v("、"),s("code",[t._v("if(100)")]),t._v("之类的写法不能在java中使用")])]),t._v(" "),s("h2",{attrs:{id:"一、-和-、-和-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、-和-、-和-的区别"}},[t._v("#")]),t._v(" 一、&和&&、|和||的区别")]),t._v(" "),s("blockquote",[s("h3",{attrs:{id:"逻辑与"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑与"}},[t._v("#")]),t._v(" &\t\t逻辑与")]),t._v(" "),s("h3",{attrs:{id:"短路与"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短路与"}},[t._v("#")]),t._v(" &&\t\t短路与")]),t._v(" "),s("h3",{attrs:{id:"逻辑非"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑非"}},[t._v("#")]),t._v(" |\t\t逻辑非")]),t._v(" "),s("h3",{attrs:{id:"短路非"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短路非"}},[t._v("#")]),t._v(" ||\t\t短路非")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//逻辑与:不论&第一个表达式结果是什么,第二个表达式一定会执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//虽然i==j为false,但i++!=j也会执行,此时i=2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//短路与:当&&之前的布尔值为false,&&之后的所有表达式都不会执行,相当于短路了")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//i==j为false,运算符停止执行,相当于短路,i++!=j不会被执行,此时i=1")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//|与||道理同上")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[s("strong",[t._v("小结:")])]),t._v(" "),s("p",[t._v("​\t\t从效率方面来说,&&的"),s("strong",[t._v("效率")]),t._v("比&高一些,大部分情况下建议"),s("strong",[t._v("使用短路与&&和短路或||")]),t._v(",只有一定要让"),s("strong",[t._v("两边表达式都执行")]),t._v("的时候才用&和|")]),t._v(" "),s("h2",{attrs:{id:"二、扩展的赋值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、扩展的赋值运算符"}},[t._v("#")]),t._v(" 二、扩展的赋值运算符")]),t._v(" "),s("blockquote",[s("h3",{attrs:{id:"扩展的赋值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展的赋值运算符"}},[t._v("#")]),t._v(" 扩展的赋值运算符:+=,-=,/=,*=,%=")]),t._v(" "),s("h3",{attrs:{id:"注意-使用扩展赋值运算符的时候-永远不会改变运算结果类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意-使用扩展赋值运算符的时候-永远不会改变运算结果类型"}},[t._v("#")]),t._v(" "),s("strong",[t._v("注意:使用扩展赋值运算符的时候,永远不会改变运算结果类型")])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//报错,x+1会各自转化为int类型计算,结果是int类型,无法自动赋给byte类型")]),t._v("\n\nx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相当于x=(byte)(x+1)")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("小结:")]),s("code",[t._v("x+=1")]),t._v("相当于"),s("code",[t._v("x=(x的数据类型)(x+1)")]),t._v(",有可能会损失精度")])])}),[],!1,null,null,null);a.default=e.exports}}]);