(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{1790:function(t,_,v){"use strict";v.r(_);var r=v(1),a=Object(r.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"线程安全"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程安全"}},[t._v("#")]),t._v(" 线程安全")]),t._v(" "),v("h2",{attrs:{id:"一、前言-为什么多线程并发环境下-数据的安全问题是重点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、前言-为什么多线程并发环境下-数据的安全问题是重点"}},[t._v("#")]),t._v(" 一、前言：为什么多线程并发环境下，数据的安全问题是重点？")]),t._v(" "),v("p",[t._v("​\t以后在开发中，我们的项目都是运行在服务器当中，而服务器已经将线程的定义，线程对象的创建，线程的启动等，都已经实现完了。这些代码我们都不需要编写。")]),t._v(" "),v("p",[t._v("​\t最重要的是：你要知道，你编写的程序需要放到一个多线程的环境下运行，你更需要关注的是这些数据在多线程并发的环境下是否是安全的。（重点：*****）")]),t._v(" "),v("h2",{attrs:{id:"二、什么时候数据在多线程并发的环境下会存在安全问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、什么时候数据在多线程并发的环境下会存在安全问题"}},[t._v("#")]),t._v(" 二、什么时候数据在多线程并发的环境下会存在安全问题？")]),t._v(" "),v("p",[t._v("​\t三个条件：\n​\t\t条件1：多线程并发。\n​\t\t条件2：有共享数据。\n​\t\t条件3：共享数据有修改的行为。")]),t._v(" "),v("p",[t._v("​\t满足以上3个条件之后，就会存在线程安全问题。")]),t._v(" "),v("h2",{attrs:{id:"三、java中三大变量的数据安全问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、java中三大变量的数据安全问题"}},[t._v("#")]),t._v(" 三、java中三大变量的数据安全问题")]),t._v(" "),v("p",[t._v("1、实例变量：在堆中。")]),t._v(" "),v("p",[t._v("2、静态变量：在方法区。")]),t._v(" "),v("p",[t._v("3、局部变量：在栈中。")]),t._v(" "),v("p",[t._v("以上三大变量中：\n"),v("strong",[t._v("局部变量")]),t._v("永远都"),v("strong",[t._v("不会存在线程安全问题")]),t._v("。因为局部变量不共享。（一个线程一个栈。）由于局部变量在栈中。所以局部变量永远都不会共享。")]),t._v(" "),v("p",[t._v("​\t\t"),v("strong",[t._v("实例变量")]),t._v("在堆中，堆只有1个。")]),t._v(" "),v("p",[t._v("​\t\t"),v("strong",[t._v("静态变量")]),t._v("在方法区中，方法区只有1个。\n​\t\t由于堆和方法区都是多线程共享的，所以可能存在线程安全问题。")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("总结：")])]),t._v(" "),v("p",[t._v("局部变量+常量：不会有线程安全问题。\n成员变量：可能会有线程安全问题。")])]),t._v(" "),v("blockquote",[v("p",[t._v("补充：")]),t._v(" "),v("p",[t._v("如果使用局部变量的话：\n建议使用：StringBuilder。\n因为局部变量不存在线程安全问题。选择StringBuilder。\nStringBuffer效率比较低。")]),t._v(" "),v("p",[t._v("ArrayList是非线程安全的。\nVector是线程安全的。\nHashMap HashSet是非线程安全的。\nHashtable是线程安全的")])]),t._v(" "),v("h2",{attrs:{id:"四、怎么解决线程安全问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四、怎么解决线程安全问题"}},[t._v("#")]),t._v(" 四、怎么解决线程安全问题？")]),t._v(" "),v("p",[t._v("​\t当多线程并发的环境下，有共享数据，并且这个数据还会被修改，此时就存在线程安全问题，怎么解决这个问题？\n​\t\t线程排队执行。（不能并发）。\n​\t\t用排队执行解决线程安全问题。\n​\t\t这种机制被称为："),v("strong",[t._v("线程同步机制")]),t._v("。")]),t._v(" "),v("p",[t._v("​\t\t专业术语叫做："),v("strong",[t._v("线程同步")]),t._v("，实际上就是线程不能并发了，"),v("strong",[t._v("线程必须排队执行")]),t._v("。")]),t._v(" "),v("p",[t._v("​\t线程同步就是线程排队了，线程排队了就会牺牲一部分效率，但数据安全是第一位，只有数据安全了，我们才可以谈效率。数据不安全，没有效率的事儿。")]),t._v(" "),v("h2",{attrs:{id:"五、线程同步涉及的两个专业术语"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五、线程同步涉及的两个专业术语"}},[t._v("#")]),t._v(" 五、线程同步涉及的两个专业术语：")]),t._v(" "),v("h3",{attrs:{id:"_1、异步编程模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、异步编程模型"}},[t._v("#")]),t._v(" 1、异步编程模型：")]),t._v(" "),v("p",[t._v("​\t\t线程t1和线程t2，各自执行各自的，t1不管t2，t2不管t1，谁也不需要等谁，这种编程模型叫做：异步编程模型。\n​\t\t其实就是："),v("strong",[t._v("多线程并发")]),t._v("（效率较高。）")]),t._v(" "),v("blockquote",[v("p",[t._v("​\t\t异步就是并发。")])]),t._v(" "),v("h3",{attrs:{id:"_2、同步编程模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、同步编程模型"}},[t._v("#")]),t._v(" 2、同步编程模型：")]),t._v(" "),v("p",[t._v("​\t\t线程t1和线程t2，在线程t1执行的时候，必须等待t2线程执行结束，或者说在t2线程执行的时候，必须等待t1线程执行结束，两个线程之间发生了等待关系，这就是同步编程模型。\n​\t\t效率较低。"),v("strong",[t._v("线程排队执行")]),t._v("。")]),t._v(" "),v("blockquote",[v("p",[t._v("​\t\t同步就是排队。")])]),t._v(" "),v("h2",{attrs:{id:"六、开发中应该怎么解决线程安全问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#六、开发中应该怎么解决线程安全问题"}},[t._v("#")]),t._v(" 六、开发中应该怎么解决线程安全问题？")]),t._v(" "),v("p",[t._v("是一上来就选择synchronized线程同步吗？\n不是，synchronized会让程序的"),v("strong",[t._v("执行效率降低")]),t._v("，用户体验不好。\n系统的用户吞吐量降低。用户体验差。在"),v("strong",[t._v("不得已的情况下再选择线程同步机制")]),t._v("。")]),t._v(" "),v("p",[v("strong",[t._v("第一种方案：")]),t._v(" 尽量使用"),v("strong",[t._v("局部变量")]),t._v("代替“实例变量和静态变量”。")]),t._v(" "),v("p",[v("strong",[t._v("第二种方案：")]),t._v(" 如果必须是实例变量，那么可以考虑"),v("strong",[t._v("创建多个对象")]),t._v("，这样实例变量的内存就不共享了。（一个线程对应1个对象，100个线程对应100个对象，对象不共享，就没有数据安全问题了。）")]),t._v(" "),v("p",[v("strong",[t._v("第三种方案：")]),t._v(" 如果不能使用局部变量，对象也不能创建多个，这个时候就只能选择synchronized了。线程同步机制。")])])}),[],!1,null,null,null);_.default=a.exports}}]);